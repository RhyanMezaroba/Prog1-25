@model Aula_05.ViewModels.OrderViewModel

@{
    ViewData["Title"] = "Criar Pedido";
}

<div class="text-center">
    <h1>Cadastro de Pedido</h1>

    <div class="container">

        <form id="formOrder" method="post" asp-action="Create" asp-controller="Order">

            <div class="row">

                <div class="form-group">
                    <label asp-for="CustomerId">Cliente:</label>
                    <select asp-for="CustomerId" class="form-control">
                        <option value="" disabled selected>Selecione um cliente</option>
                        @foreach (var c in Model.Customers)
                        {
                            <option value="@c.Id">@c.Name</option>
                        }
                    </select>
                    <span asp-validation-for="CustomerId" class="text-danger"></span>
                </div>

                <table class="table table-striped table-bordered table-hover table-responsive mt-3">
                    <thead>
                        <tr>
                            <th>Sel.</th>
                            <th>Produto</th>
                            <th>Val. Unit.</th>
                            <th>Quantidade</th>
                            <th>Val.</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.SelectedItems!.Count; i++)
                        {
                            <tr>
                                <td>
                                    <input asp-for="SelectedItems[@i].IsSelected" />
                                </td>
                                <td>
                                    <input type="hidden" asp-for="SelectedItems[@i].OrderItem.Product.Id" />
                                    <span>@Model.SelectedItems[i].OrderItem!.Product!.ProductName</span>
                                </td>
                                <td>
                                    <span class="unit-price-display">@string.Format("{0:C}", Model.SelectedItems[i].OrderItem!.Product!.CurrentPrice)</span>
                                    <input type="hidden" class="unit-price-value" value="@Model.SelectedItems[i].OrderItem!.Product!.CurrentPrice.ToString(System.Globalization.CultureInfo.InvariantCulture)" />
                                </td>
                                <td>
                                    <input asp-for="SelectedItems[@i].OrderItem.Quantity" type="number" min="1" class="form-control quantity-input" />
                                    <span asp-validation-for="SelectedItems[@i].OrderItem.Quantity" class="text-danger"></span>
                                </td>
                                <td>
                                    <input asp-for="SelectedItems[@i].OrderItem.PurchasePrice" class="form-control total-price-input" readonly />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>

            <button id="btnOrder" type="submit" class="btn btn-primary mt-3" value="Cadastrar">
                Cadastrar
            </button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        function formatCurrency(value) {
            return value.toLocaleString('pt-BR', {
                style: 'currency',
                currency: 'BRL'
            });
        }

        function calculateRowTotal(row) {
            const quantityInput = row.querySelector('.quantity-input');
            const unitPriceValueInput = row.querySelector('.unit-price-value');
            const totalPriceInput = row.querySelector('.total-price-input');

            if (quantityInput && unitPriceValueInput && totalPriceInput) {
                const quantity = parseFloat(quantityInput.value) || 0;
                const unitPrice = parseFloat(unitPriceValueInput.value) || 0;

                const total = quantity * unitPrice;

                totalPriceInput.value = total.toFixed(2);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const quantityInputs = document.querySelectorAll('.quantity-input');

            quantityInputs.forEach(input => {
                calculateRowTotal(input.closest('tr'));

                input.addEventListener('input', function () {
                    calculateRowTotal(this.closest('tr'));
                });
                input.addEventListener('change', function () {
                    calculateRowTotal(this.closest('tr'));
                });
            });
        });
    </script>
}
